/* arch/arm/mach-rk29/include/mach/cru.h
 *
 * Copyright (C) 2010 ROCKCHIP, Inc.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef __ASM_ARCH_RK29_CRU_H
#define __ASM_ARCH_RK29_CRU_H

enum cru_clk_gate
{
	/* SCU CLK GATE 0 CON */
	CLK_GATE_CORE = 0,
	CLK_GATE_PCLK_CORE,
	CLK_GATE_ATCLK_CORE,
	CLK_GATE_ACLK_CPU,
	CLK_GATE_ACLK_CPU2,
	CLK_GATE_HCLK_CPU,
	CLK_GATE_HCLK_CPU_MATRIX1,
	CLK_GATE_PCLK_CPU,
	CLK_GATE_ATCLK_CPU,
	CLK_GATE_DMA1 = 10,
	CLK_GATE_GIC,
	CLK_GATE_INTMEM,
	CLK_GATE_ROM = 14,
	CLK_GATE_I2S0,
	CLK_GATE_I2S1,
	CLK_GATE_SPDIF,
	CLK_GATE_DDR_PHY,
	CLK_GATE_DDR_REG,
	CLK_GATE_DDR_CPU,
	CLK_GATE_EFUSE,
	CLK_GATE_TZPC,
	CLK_GATE_TIMER0,
	CLK_GATE_GPIO0,
	CLK_GATE_UART0,
	CLK_GATE_I2C0,
	CLK_GATE_DEBUG,
	CLK_GATE_TPIU,
	CLK_GATE_RTC,
	CLK_GATE_PMU,
	CLK_GATE_GRF,

	/* SCU CLK GATE 1 CON */
	CLK_GATE_ACLK_PEIRPH = 32,
	CLK_GATE_HCLK_PEIRPH,
	CLK_GATE_PCLK_PEIRPH,
	CLK_GATE_EMEM,
	CLK_GATE_HCLK_USB_PERI,
	CLK_GATE_DMA2,
	CLK_GATE_ACLK_DDR_PERI,
	CLK_GATE_ACLK_CPU_PERI,
	CLK_GATE_ACLK_SMC,
	CLK_GATE_SMC,
	CLK_GATE_HCLK_MAC = 43,
	CLK_GATE_MAC_REF,
	CLK_GATE_MII_TX,
	CLK_GATE_MII_RX,
	CLK_GATE_HIF,
	CLK_GATE_NANDC,
	CLK_GATE_HCLK_HSADC,
	CLK_GATE_HSADC,
	CLK_GATE_HCLK_MMC0,
	CLK_GATE_MMC0,
	CLK_GATE_HCLK_MMC1,
	CLK_GATE_MMC1,
	CLK_GATE_HCLK_EMMC,
	CLK_GATE_EMMC,
	CLK_GATE_USBOTG0,
	CLK_GATE_USBPHY0,
	CLK_GATE_USBOTG1,
	CLK_GATE_USBPHY1,
	CLK_GATE_HCLK_UHOST,
	CLK_GATE_UHOST,
	CLK_GATE_PID_FILTER,

	/* SCU CLK GATE 2 CON */
	CLK_GATE_UART1 = 64,
	CLK_GATE_UART2,
	CLK_GATE_UART3,
	CLK_GATE_TIMER1,
	CLK_GATE_TIMER2,
	CLK_GATE_TIMER3,
	CLK_GATE_GPIO1,
	CLK_GATE_GPIO2,
	CLK_GATE_GPIO3,
	CLK_GATE_GPIO4,
	CLK_GATE_GPIO5,
	CLK_GATE_GPIO6,
	CLK_GATE_I2C1,
	CLK_GATE_I2C2,
	CLK_GATE_I2C3,
	CLK_GATE_SPI0,
	CLK_GATE_SPI1,
	CLK_GATE_VIP_SLAVE = 82,
	CLK_GATE_WDT,
	CLK_GATE_SARADC,
	CLK_GATE_PWM,
	CLK_GATE_VIP_BUS,
	CLK_GATE_VIP_MATRIX,
	CLK_GATE_VIP_OUT,
	CLK_GATE_VIP_INPUT,
	CLK_GATE_JTAG,

	/* CRU CLK GATE 3 CON */
	CLK_GATE_ACLK_LCDC = 96,
	CLK_GATE_ACLK_DDR_LCDC,
	CLK_GATE_HCLK_LCDC,
	CLK_GATE_DCLK_LCDC,
	CLK_GATE_ACLK_IPP,
	CLK_GATE_HCLK_IPP,
	CLK_GATE_HCLK_EBOOK,
	CLK_GATE_DCLK_EBOOK,
	CLK_GATE_ACLK_DISP_MATRIX,
	CLK_GATE_HCLK_DISP_MATRIX,
	CLK_GATE_ACLK_VEPU,
	CLK_GATE_ACLK_DDR_VEPU,
	CLK_GATE_ACLK_VDPU,
	CLK_GATE_ACLK_DDR_VDPU,
	CLK_GATE_GPU,
	CLK_GATE_ACLK_GPU,
	CLK_GATE_ACLK_DDR_GPU,
	CLK_GATE_HCLK_GPU,
	CLK_GATE_HCLK_VEPU,
	CLK_GATE_HCLK_VDPU,
	CLK_GATE_HCLK_CPU_VCODEC,
	CLK_GATE_HCLK_CPU_DISPLAY,

	CLK_GATE_MAX,
};

enum cru_soft_reset {
	SOFT_RST_ARM_CORE = 0,
	SOFT_RST_CPU_SYSTEM_INTERCONNECT_1_AXI,
	SOFT_RST_CPU_SYSTEM_INTERCONNECT_1_AHB,
	SOFT_RST_CPU_SYSTEM_INTERCONNECT_1_APB,
	SOFT_RST_CPU_SYSTEM_INTERCONNECT_1_ATB,
	SOFT_RST_CPU_SYSTEM_INTERCONNECT_2,
	SOFT_RST_DMA0 = 7,
	SOFT_RST_GIC,
	SOFT_RST_INTERNAL_MEMORY,
	SOFT_RST_TZPC = 11,
	SOFT_RST_ROM,
	SOFT_RST_I2S0,
	SOFT_RST_I2S1,
	SOFT_RST_SPDIF,
	SOFT_RST_UART0,
	SOFT_RST_RTC,
	SOFT_RST_DDR_PHY,
	SOFT_RST_DDR_DLL_BYTE0,
	SOFT_RST_DDR_DLL_BYTE1,
	SOFT_RST_DDR_DLL_BYTE2,
	SOFT_RST_DDR_DLL_BYTE3,
	SOFT_RST_DDR_DLL_CMD,
	SOFT_RST_DDR_CONTROLLER,
	SOFT_RST_ARM_CORE_DEBUG,
	SOFT_RST_DAP_DBG,
	SOFT_RST_CPU_VODEC_A2A_AHB,
	SOFT_RST_CPU_DISPLAY_A2A_AHB,
	SOFT_RST_DAP_SYS,

	SOFT_RST_PERI_SYSTEM_INTERCONNECT_1_AXI = 32,
	SOFT_RST_PERI_SYSTEM_INTERCONNECT_1_AHB,
	SOFT_RST_PERI_SYSTEM_INTERCONNECT_1_APB,
	SOFT_RST_PERIPH_EMEM = 32 + 4,
	SOFT_RST_PERIPH_USB,
	SOFT_RST_DMA1,
	SOFT_RST_MAC,
	SOFT_RST_HIF,
	SOFT_RST_NANDC,
	SOFT_RST_SMC,
	SOFT_RST_HSADC = 32 + 12,
	SOFT_RST_SDMMC,
	SOFT_RST_SDIO,
	SOFT_RST_EMMC,
	SOFT_RST_USB_OTG_2_0_AHB_BUS,
	SOFT_RST_USB_OTG_2_0_PHY,
	SOFT_RST_USB_OTG_2_0_CONTROLLER,
	SOFT_RST_USB_HOST_2_0_AHB_BUS,
	SOFT_RST_USB_HOST_2_0_PHY,
	SOFT_RST_USB_HOST_2_0_CONTROLLER,
	SOFT_RST_UHOST,
	SOFT_RST_VIP,
	SOFT_RST_VIP_MATRIX_AHB,
	SOFT_RST_SPI0,
	SOFT_RST_SPI1,
	SOFT_RST_SARADC,
	SOFT_RST_UART1,
	SOFT_RST_UART2,
	SOFT_RST_UART3,
	SOFT_RST_PWM,

	SOFT_RST_DISPLAY_INTERCONNECTOR_AXI = 64,
	SOFT_RST_DISPLAY_INTERCONNECTOR_AHB,
	SOFT_RST_LCDC,
	SOFT_RST_IPP,
	SOFT_RST_EBC,
	SOFT_RST_GPU = 64 + 7,
	SOFT_RST_DDR_REG_PORT,
	SOFT_RST_DDR_CPU_PORT,
	SOFT_RST_PERIPH_USED_CPU_AXI,
	SOFT_RST_DDR_PERIPH_PORT,
	SOFT_RST_DDR_LCDC_PORT,
	SOFT_RST_DDR_VCODEC_PORT = 64 + 15,
	SOFT_RST_DDR_GPU_PORT,
	SOFT_RST_PID_FILTER_AHB,
	SOFT_RST_VCODEC_AXI_BUS,
	SOFT_RST_VCODEC_AHB_BUS,
	SOFT_RST_TIMER0,
	SOFT_RST_TIMER1,
	SOFT_RST_TIMER2,
	SOFT_RST_TIMER3,

	SOFT_RST_MAX,
};

/* CRU MODE CON */
#define CRU_CPU_MODE_MASK	(0x03u << 0)
#define CRU_CPU_MODE_SLOW	(0x00u << 0)
#define CRU_CPU_MODE_NORMAL	(0x01u << 0)
#define CRU_CPU_MODE_SLOW27	(0x02u << 0)

#define CRU_GENERAL_MODE_MASK	(0x03u << 2)
#define CRU_GENERAL_MODE_SLOW	(0x00u << 2)
#define CRU_GENERAL_MODE_NORMAL	(0x01u << 2)
#define CRU_GENERAL_MODE_SLOW27	(0x02u << 2)

#define CRU_CODEC_MODE_MASK	(0x03u << 4)
#define CRU_CODEC_MODE_SLOW	(0x00u << 4)
#define CRU_CODEC_MODE_NORMAL	(0x01u << 4)
#define CRU_CODEC_MODE_SLOW27	(0x02u << 4)

#define CRU_DDR_MODE_MASK	(0x03u << 6)
#define CRU_DDR_MODE_SLOW	(0x00u << 6)
#define CRU_DDR_MODE_NORMAL	(0x01u << 6)
#define CRU_DDR_MODE_SLOW27	(0x02u << 6)

/* CRU PLL CON */
#define PLL_HIGH_BAND	(0x01 << 16)
#define PLL_LOW_BAND	(0x00 << 16)
#define PLL_PD		(0x01 << 15)

#define PLL_CLKR(i)	((((i) - 1) & 0x1f) << 10)
#define PLL_NR(v)	((((v) >> 10) & 0x1f) + 1)

#define PLL_CLKF(i)	((((i) - 1) & 0x7f) << 3)
#define PLL_NF(v)	((((v) >> 3) & 0x7f) + 1)
#define PLL_NF2(v)	(((((v) >> 3) & 0x7f) + 1) << 1)

#define PLL_CLKOD(i)	(((i) & 0x03) << 1)
#define PLL_NO_1	PLL_CLKOD(0)
#define PLL_NO_2	PLL_CLKOD(1)
#define PLL_NO_4	PLL_CLKOD(2)
#define PLL_NO_8	PLL_CLKOD(3)
#define PLL_NO_SHIFT(v)	(((v) >> 1) & 0x03)

#define PLL_BYPASS	(0x01)

/* Register definitions */
#define CRU_APLL_CON		0x00
#define CRU_DPLL_CON		0x04
#define CRU_CPLL_CON		0x08
#define CRU_GPLL_CON		0x0c
#define CRU_MODE_CON		0x10
#define CRU_CLKSEL0_CON		0x14
#define CRU_CLKSEL1_CON		0x18
#define CRU_CLKSEL2_CON		0x1c
#define CRU_CLKSEL3_CON		0x20
#define CRU_CLKSEL4_CON		0x24
#define CRU_CLKSEL5_CON		0x28
#define CRU_CLKSEL6_CON		0x2c
#define CRU_CLKSEL7_CON		0x30
#define CRU_CLKSEL8_CON		0x34
#define CRU_CLKSEL9_CON		0x38
#define CRU_CLKSEL10_CON	0x3c
#define CRU_CLKSEL11_CON	0x40
#define CRU_CLKSEL12_CON	0x44
#define CRU_CLKSEL13_CON	0x48
#define CRU_CLKSEL14_CON	0x4c
#define CRU_CLKSEL15_CON	0x50
#define CRU_CLKSEL16_CON	0x54
#define CRU_CLKSEL17_CON	0x58
#define CRU_CLKGATE0_CON	0x5c
#define CRU_CLKGATE1_CON	0x60
#define CRU_CLKGATE2_CON	0x64
#define CRU_CLKGATE3_CON	0x68
#define CRU_SOFTRST0_CON	0x6c
#define CRU_SOFTRST1_CON	0x70
#define CRU_SOFTRST2_CON	0x74

#define cru_readl(offset)	readl(RK29_CRU_BASE + offset)
#define cru_writel(v, offset)	do { writel(v, RK29_CRU_BASE + offset); dsb(); } while (0)

extern volatile u32 cru_clkgate3_con_mirror;
void cru_set_soft_reset(enum cru_soft_reset idx, bool on);

#define LOOPS_PER_USEC	13
#define LOOPS_PER_MSEC	12000
#define LOOP(loops) do { unsigned int i = loops; barrier(); while (--i) barrier(); } while (0)

#endif
